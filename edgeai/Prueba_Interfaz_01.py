# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'gui.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import *
from PyQt5.QtGui import *
import cv2
import time
from PIL import ImageQt


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(670, 370)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(10, 10, 480, 320))
        self.label.setObjectName("label")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(500, 263, 80, 70))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(582, 263, 80, 70))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(500, 3, 165, 124))
        self.pushButton_3.setText("")
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(500, 129, 165, 124))
        self.pushButton_4.setText("")
        self.pushButton_4.setObjectName("pushButton_4")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 670, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.camera_on = False
        self.image_list = []
        self.pushButton.clicked.connect(self.start_video)
        self.pushButton_2.clicked.connect(self.savePhoto)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "TextLabel"))
        self.pushButton.setText(_translate("MainWindow", "START"))
        self.pushButton_2.setText(_translate("MainWindow", "CAPTURE"))

    def start_video(self):
        if not self.camera_on:
            self.Work = Work()
            self.Work.start()
            self.Work.Imageupd.connect(self.Imageupd_slot)
            self.camera_on = True
            self.pushButton.setText("STOP")
            self.pushButton_2.setEnabled(True)
        else:
            self.Work.stop()
            self.camera_on = False
            self.pushButton.setText("START")
            self.pushButton_2.setEnabled(False)

    def Imageupd_slot(self, Image):
        self.label.setPixmap(QPixmap.fromImage(Image))

    def savePhoto(self):
        gallery = ImageQt.fromqpixmap(self.label.pixmap())
        self.filename = 'Snapshot ' + str(time.strftime("%Y-%b-%d at %H.%M.%S %p")) + '.png'
        gallery.save(self.filename)

        pixmap = QPixmap(self.filename)
        self.image_list.append(pixmap)

        # Display the latest image on a QPushButton
        self.pushButton_3.setIcon(QIcon(pixmap))
        self.pushButton_3.setIconSize(self.pushButton_3.size())
        self.pushButton_3.clicked.connect(self.toggleImageVisibility)

        if len(self.image_list) >=2:
            # Display the previous image on QPushButton_4
            previous_pixmap = self.image_list[-2]
            self.pushButton_4.setIcon(QIcon(previous_pixmap))
            self.pushButton_4.setIconSize(self.pushButton_4.size())
            self.pushButton_4.clicked.connect(self.toggleImageVisibility2)

    def toggleImageVisibility(self):
        # Toggle the visibility of the image in label_5
        if self.label.isVisible():
            self.label.clear()
            self.label.setVisible(False)
        else:
            pixmap = self.pushButton_3.icon().pixmap(self.pushButton_3.iconSize())
            scaled_pixmap = pixmap.scaled(self.label.width(), self.label.height())
            self.label.setPixmap(scaled_pixmap)
            self.label.setVisible(True)

    def toggleImageVisibility2(self):
        # Toggle the visibility of the image in label_5
        if self.label.isVisible():
            self.label.clear()
            self.label.setVisible(False)
        else:
            pixmap = self.pushButton_4.icon().pixmap(self.pushButton_4.iconSize())
            scaled_pixmap = pixmap.scaled(self.label.width(), self.label.height())
            self.label.setPixmap(scaled_pixmap)
            self.label.setVisible(True)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "START"))
        self.pushButton_2.setText(_translate("MainWindow", "CAPTURE"))


class Work(QThread):
    Imageupd = pyqtSignal(QImage)

    def run(self):
        self.hilo_corriendo = True
        cap = cv2.VideoCapture(0)
        while self.hilo_corriendo:
            ret, frame = cap.read()
            if ret:
                Image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                flip = cv2.flip(Image, 1)
                convertir_QT = QImage(flip.data, flip.shape[1], flip.shape[0], QImage.Format_RGB888)
                # pic = convertir_QT.scaled(480, 320, Qt.KeepAspectRatio)
                pic = convertir_QT.scaled(480, 320)
                self.Imageupd.emit(pic)

    def stop(self):
        self.hilo_corriendo = False
        self.quit()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
